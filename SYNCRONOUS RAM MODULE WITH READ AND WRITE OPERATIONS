
# CODE
// Code your design here
`timescale 1ns / 1ps

module sync_ram (
    input wire clk,
    input wire we,
    input wire [3:0] addr,
    input wire [7:0] din,
    output reg [7:0] dout
);

    reg [7:0] mem [15:0];

    always @(posedge clk) begin
        if (we)
            mem[addr] <= din;
        else
            dout <= mem[addr];
    end

endmodule



#TESTBENCH
// Code your testbench here
// or browse Examples
`timescale 1ns / 1ps

module tb_sync_ram;

    reg clk;
    reg we;
    reg [3:0] addr;
    reg [7:0] din;
    wire [7:0] dout;

    // Instantiate the RAM
    sync_ram uut (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk;

    // Dumpfile for waveform
    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_sync_ram);
    end

    // Test sequence
    initial begin
        $display("Starting RAM Test");
        $monitor("Time=%d clk=%b we=%b addr=%h din=%h dout=%h",
                  $time, clk, we, addr, din, dout);

        // Initialization
        we = 0; addr = 0; din = 8'h00;
        #10;

        // Write to address 1
        @(posedge clk); we = 1; addr = 4'h1; din = 8'h11;
        @(posedge clk); addr = 4'h2; din = 8'h22;
        @(posedge clk); addr = 4'h3; din = 8'h33;

        // Read from address 1, 2, 3
        @(posedge clk); we = 0; addr = 4'h1;
        @(posedge clk); addr = 4'h2;
        @(posedge clk); addr = 4'h3;

        #20 $finish;
    end

endmodule
